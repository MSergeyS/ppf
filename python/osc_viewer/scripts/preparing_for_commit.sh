#!/bin/bash

# Скрипт для обновления даты и версии в заголовке *.py файлов, если есть изменения для коммита

# Получаем текущую дату в формате YYYY-MM-DD
current_date=$(date +%Y-%m-%d)

# Переходим в корень проекта (директория выше scripts)
cd "$(dirname "$0")/.."
source_path=$(pwd)
# echo "Текущая директория: $(pwd)"

# Получаем список изменённых *.py файлов (кроме __pycache__)
echo "Проверяю изменённые файлы в репозитории..."
changed_files=$(git status --porcelain | awk '{print $2}' | grep '\.py$' | grep -v '__pycache__')
echo "Файлы с изменениями:"
# Серый цвет ANSI: \033[90m ... \033[0m
while IFS= read -r file; do
    echo -e "\033[90m${file}\033[0m"
done <<< "${changed_files}"
# Если нет изменённых файлов, выходим
if [ -z "$changed_files" ]; then
    echo "Нет изменённых файлов. Выход."
    exit 0
fi

# Переходим в директорию репозитария git
cd ../..
# echo dir: $(pwd)

# Обрабатываем каждый файл из списка changed_files
while IFS= read -r file; do
    echo "Проверяю файл: $file"
    # Пример заголовка, который нужно обновить:
	# Дата:        2025-09-25
	# Версия:      1.0.0

    # Ищем строку с датой в формате YYYY-MM-DD
    # Если такая строка найдена, обновляем дату (между "Дата:" и датой может быть любое количество пробелов)
	if grep -qE "^ *Дата: *[0-9]{4}-[0-9]{2}-[0-9]{2}" "$file"; then
		sed -i "0,/^ *Дата: *[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/s/Дата: *[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/Дата:         $current_date/" "$file"
		echo -e "\033[32;2mОбновлено $file: Дата -> $current_date\033[0m"
	else
		echo -e "\033[33mВ $file не найдена строка с датой, пропускаю\033[0m"
	fi

    # Ищем строку с версией в формате X.Y.Z
	# Если такая строка найдена, увеличиваем патч-версию на 1
	# Пример заголовка, который нужно обновить:
	# Версия:      1.0.0
    # Пример изменения:  1.0.0 -> 1.0.1
	if grep -qE "^ *Версия: *[0-9]{1,}\.[0-9]{1,}\.[0-9]{1,}" "$file"; then
		# echo "Найдена строка с версией в $file"

		# Извлекаем текущую версию
		old_version=$(grep -Eo '^ *Версия: *[0-9]{1,}\.[0-9]{1,}\.[0-9]{1,}' "$file" | head -1 | sed -E 's/^ *Версия: *//')
		# echo "Текущая версия: $old_version"

		# Увеличиваем патч-версию на 1
		major=$(echo "$old_version" | cut -d. -f1)
		minor=$(echo "$old_version" | cut -d. -f2)
		patch=$(echo "$old_version" | cut -d. -f3)
		new_patch=$((patch + 1))
		new_version="$major.$minor.$new_patch"
		# echo "Новая версия: $new_version"

		# Обновляем только первую найденную строку с версией, сохраняя форматирование
		sed -i "0,/^ *Версия: *[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}/s/Версия: *[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}/Версия:       $new_version/" "$file"
		echo -e "\033[32;2mОбновлено $file: Версия -> $new_version\033[0m"
	else
		echo -e "\033[33mВ $file не найдена строка с версией, пропускаю\033[0m"
	fi

done <<< "${changed_files}"

echo -e "\033[32mГотово.\033[0m"